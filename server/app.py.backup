"""FastAPI application for Databricks App Template."""

import os
from contextlib import asynccontextmanager
from pathlib import Path

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles

from server.routers import router


# Load environment variables from .env.local if it exists
def load_env_file(filepath: str) -> None:
  """Load environment variables from a file."""
  if Path(filepath).exists():
    with open(filepath) as f:
      for line in f:
        line = line.strip()
        if line and not line.startswith('#'):
          key, _, value = line.partition('=')
          if key and value:
            os.environ[key] = value


# Load .env files
load_env_file('.env')
load_env_file('.env.local')


@asynccontextmanager
async def lifespan(app: FastAPI):
  """Manage application lifespan."""
  yield


app = FastAPI(
  title='Databricks App API',
  description='Modern FastAPI application template for Databricks Apps with React frontend',
  version='0.1.0',
  lifespan=lifespan,
)

app.add_middleware(
  CORSMiddleware,
  allow_origins=['*'],  # Allow all origins in Databricks Apps (served from same domain)
  allow_credentials=True,
  allow_methods=['*'],
  allow_headers=['*'],
)

@app.get('/health')
async def health():
  """Health check endpoint."""
  return {'status': 'healthy'}


# Include API routes BEFORE static files
app.include_router(router, prefix='/api', tags=['api'])


# ============================================================================
# SERVE STATIC FILES FROM CLIENT BUILD DIRECTORY (MUST BE LAST!)
# ============================================================================
# This static file mount MUST be the last route registered!
# It catches all unmatched requests and serves the React app.
# Any routes added after this will be unreachable!

# Try multiple possible paths for the build directory
build_paths = [
  'client/build',
  '/Workspace/Users/krishnendu.hazra@databricks.com/text2codeapp/client/build',
  './client/build',
]

build_dir = None
for path in build_paths:
  if os.path.exists(path):
    build_dir = path
    print(f"ℹ Found build directory at: {build_dir}")
    break

if not build_dir:
  print(f"⚠ Warning: No build directory found. Frontend will not be served.")
  print(f"   Tried: {build_paths}")

if build_dir:
  try:
    app.mount('/', StaticFiles(directory=build_dir, html=True), name='static')
    print(f"✓ Static files mounted from: {build_dir}")
  except Exception as e:
    print(f"⚠ Warning: Could not mount static files: {e}")
    # Continue without static files - API will still work
else:
  # Fallback: add a catch-all route that returns 404
  @app.get('/{path:path}')
  async def catch_all(path: str):
    """Catch-all route when no frontend available."""
    return {'error': 'Not found', 'status': 404}
